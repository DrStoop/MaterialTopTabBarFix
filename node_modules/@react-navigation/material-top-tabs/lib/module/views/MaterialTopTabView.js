function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { CommonActions, useLocale, useTheme } from '@react-navigation/native';
import * as React from 'react';
import { TabView } from 'react-native-tab-view';
import { TabAnimationContext } from '../utils/TabAnimationContext';
import { MaterialTopTabBar } from './MaterialTopTabBar';
export function MaterialTopTabView({
  tabBar = props => /*#__PURE__*/React.createElement(MaterialTopTabBar, props),
  state,
  navigation,
  descriptors,
  sceneContainerStyle,
  ...rest
}) {
  const {
    colors
  } = useTheme();
  const {
    direction
  } = useLocale();
  const renderTabBar = props => {
    return tabBar({
      ...props,
      state: state,
      navigation: navigation,
      descriptors: descriptors
    });
  };
  const focusedOptions = descriptors[state.routes[state.index].key].options;
  return /*#__PURE__*/React.createElement(TabView, _extends({}, rest, {
    onIndexChange: index => {
      const route = state.routes[index];
      navigation.dispatch({
        ...CommonActions.navigate(route),
        target: state.key
      });
    },
    renderScene: ({
      route,
      position
    }) => /*#__PURE__*/React.createElement(TabAnimationContext.Provider, {
      value: {
        position
      }
    }, descriptors[route.key].render()),
    navigationState: state,
    renderTabBar: renderTabBar,
    renderLazyPlaceholder: ({
      route
    }) => descriptors[route.key].options.lazyPlaceholder?.() ?? null,
    lazy: ({
      route
    }) => descriptors[route.key].options.lazy === true && !state.preloadedRouteKeys.includes(route.key),
    lazyPreloadDistance: focusedOptions.lazyPreloadDistance,
    swipeEnabled: focusedOptions.swipeEnabled,
    animationEnabled: focusedOptions.animationEnabled,
    onSwipeStart: () => navigation.emit({
      type: 'swipeStart'
    }),
    onSwipeEnd: () => navigation.emit({
      type: 'swipeEnd'
    }),
    sceneContainerStyle: [{
      backgroundColor: colors.background
    }, sceneContainerStyle],
    direction: direction
  }));
}
//# sourceMappingURL=MaterialTopTabView.js.map