"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaterialTopTabBar = MaterialTopTabBar;
var _elements = require("@react-navigation/elements");
var _native = require("@react-navigation/native");
var _color = _interopRequireDefault(require("color"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeTabView = require("react-native-tab-view");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const MaterialLabel = ({
  color,
  labelText,
  labelStyle,
  allowScaling
}) => {
  return /*#__PURE__*/React.createElement(_elements.Text, {
    style: [{
      color
    }, styles.label, labelStyle],
    allowFontScaling: allowScaling
  }, labelText);
};
const renderLabel = props => {
  return /*#__PURE__*/React.createElement(MaterialLabel, props);
};
function MaterialTopTabBar({
  state,
  navigation,
  descriptors,
  ...rest
}) {
  const {
    colors
  } = (0, _native.useTheme)();
  const {
    direction
  } = (0, _native.useLocale)();
  const {
    buildHref
  } = (0, _native.useLinkBuilder)();
  const focusedOptions = descriptors[state.routes[state.index].key].options;
  const activeColor = focusedOptions.tabBarActiveTintColor ?? colors.text;
  const inactiveColor = focusedOptions.tabBarInactiveTintColor ?? (0, _color.default)(activeColor).alpha(0.5).rgb().string();
  const tabBarOptions = Object.fromEntries(state.routes.map(route => {
    const {
      options
    } = descriptors[route.key];
    return [route.key, {
      href: buildHref(route.name, route.params),
      testID: options.tabBarButtonTestID,
      accessibilityLabel: options.tabBarAccessibilityLabel,
      badge: options.tabBarBadge,
      icon: options.tabBarShowIcon === false ? undefined : options.tabBarIcon,
      label: options.tabBarShowLabel === false ? undefined : renderLabel,
      labelAllowFontScaling: options.tabBarAllowFontScaling,
      labelStyle: options.tabBarLabelStyle,
      labelText: options.tabBarShowLabel === false ? undefined : options.title !== undefined ? options.title : route.name
    }];
  }));
  return /*#__PURE__*/React.createElement(_reactNativeTabView.TabBar, _extends({}, rest, {
    navigationState: state,
    options: tabBarOptions,
    direction: direction,
    scrollEnabled: focusedOptions.tabBarScrollEnabled,
    bounces: focusedOptions.tabBarBounces,
    activeColor: activeColor,
    inactiveColor: inactiveColor,
    pressColor: focusedOptions.tabBarPressColor,
    pressOpacity: focusedOptions.tabBarPressOpacity,
    tabStyle: focusedOptions.tabBarItemStyle,
    indicatorStyle: [{
      backgroundColor: colors.primary
    }, focusedOptions.tabBarIndicatorStyle],
    gap: focusedOptions.tabBarGap,
    android_ripple: focusedOptions.tabBarAndroidRipple,
    indicatorContainerStyle: focusedOptions.tabBarIndicatorContainerStyle,
    contentContainerStyle: focusedOptions.tabBarContentContainerStyle,
    style: [{
      backgroundColor: colors.card
    }, focusedOptions.tabBarStyle],
    onTabPress: ({
      route,
      preventDefault
    }) => {
      const event = navigation.emit({
        type: 'tabPress',
        target: route.key,
        canPreventDefault: true
      });
      if (event.defaultPrevented) {
        preventDefault();
      }
    },
    onTabLongPress: ({
      route
    }) => navigation.emit({
      type: 'tabLongPress',
      target: route.key
    }),
    renderIndicator: ({
      navigationState: state,
      ...rest
    }) => {
      return focusedOptions.tabBarIndicator ? focusedOptions.tabBarIndicator({
        state: state,
        ...rest
      }) : /*#__PURE__*/React.createElement(_reactNativeTabView.TabBarIndicator, _extends({
        navigationState: state
      }, rest));
    }
  }));
}
const styles = _reactNative.StyleSheet.create({
  label: {
    textAlign: 'center',
    fontSize: 14,
    margin: 4,
    backgroundColor: 'transparent'
  }
});
//# sourceMappingURL=MaterialTopTabBar.js.map