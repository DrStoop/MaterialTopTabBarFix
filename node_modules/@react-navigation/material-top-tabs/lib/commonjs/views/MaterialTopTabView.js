"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaterialTopTabView = MaterialTopTabView;
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _reactNativeTabView = require("react-native-tab-view");
var _TabAnimationContext = require("../utils/TabAnimationContext");
var _MaterialTopTabBar = require("./MaterialTopTabBar");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function MaterialTopTabView({
  tabBar = props => /*#__PURE__*/React.createElement(_MaterialTopTabBar.MaterialTopTabBar, props),
  state,
  navigation,
  descriptors,
  sceneContainerStyle,
  ...rest
}) {
  const {
    colors
  } = (0, _native.useTheme)();
  const {
    direction
  } = (0, _native.useLocale)();
  const renderTabBar = props => {
    return tabBar({
      ...props,
      state: state,
      navigation: navigation,
      descriptors: descriptors
    });
  };
  const focusedOptions = descriptors[state.routes[state.index].key].options;
  return /*#__PURE__*/React.createElement(_reactNativeTabView.TabView, _extends({}, rest, {
    onIndexChange: index => {
      const route = state.routes[index];
      navigation.dispatch({
        ..._native.CommonActions.navigate(route),
        target: state.key
      });
    },
    renderScene: ({
      route,
      position
    }) => /*#__PURE__*/React.createElement(_TabAnimationContext.TabAnimationContext.Provider, {
      value: {
        position
      }
    }, descriptors[route.key].render()),
    navigationState: state,
    renderTabBar: renderTabBar,
    renderLazyPlaceholder: ({
      route
    }) => descriptors[route.key].options.lazyPlaceholder?.() ?? null,
    lazy: ({
      route
    }) => descriptors[route.key].options.lazy === true && !state.preloadedRouteKeys.includes(route.key),
    lazyPreloadDistance: focusedOptions.lazyPreloadDistance,
    swipeEnabled: focusedOptions.swipeEnabled,
    animationEnabled: focusedOptions.animationEnabled,
    onSwipeStart: () => navigation.emit({
      type: 'swipeStart'
    }),
    onSwipeEnd: () => navigation.emit({
      type: 'swipeEnd'
    }),
    sceneContainerStyle: [{
      backgroundColor: colors.background
    }, sceneContainerStyle],
    direction: direction
  }));
}
//# sourceMappingURL=MaterialTopTabView.js.map